\relax 
\abx@aux@refcontext{nty/global//global/global}
\@writefile{toc}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lof}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lot}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1}Hidden Surface Removal Problem:}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Which algorithmic paradigm will you use to solve this problem?}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Why did you chose the algorithmic paradigm selected above to solve this problem?}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Give an algorithm that takes $n$ lines as input, and in $O(n \qopname  \relax o{log}{n})$ time returns all of the lines that are visible. Provide a clear description of the algorithm.}{1}}
\@writefile{loa}{\defcounter {refsection}{0}\relax }\@writefile{loa}{\contentsline {algorithm}{\numberline {1}{\ignorespaces Hidden-Surface-Removal: HSR($L$)\relax }}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}Perform asymptotic analysis of your algorithm's running time. Also, consider the run time performance of a best case, worst case, and average case input model scenario.}{2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}Provide a proof that your algorithm works correctly:}{2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2}Bipartite Matching Problem}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Which algorithmic paradigm best describes this algorithm?}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Why did you choose the algorithmic paradigm selected above?}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Give an example of a bipartite graph $G$ for which this algorithm does not return the maximum matching.}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Let $M$ and $M'$ be matchings in a bipartite graph $G$. Suppose that $|M'| > 2 \cdot |M|.$ Show that there is an edge $e' \in M'$ such that $M \cup {e'}$ is a matching in $G$.}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Using the previous claim (and your supporting proof) to further prove that the algorithm is optimal or that the algorithm is $\rho $-optimal approximate (in this case be sure to derive the value of $\rho $ as part of your proof).}{3}}
\abx@aux@refcontextdefaultsdone
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3}Number Partitioning Problem}{4}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Problem Statement:}{4}}
